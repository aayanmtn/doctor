import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import 'package:easy_date_timeline/easy_date_timeline.dart';import '../models/am_item_model.dart';import '../models/gendersection_item_model.dart';import 'package:aayan_mateen_s_application1/presentation/new_appointment_screen/models/new_appointment_model.dart';part 'new_appointment_event.dart';part 'new_appointment_state.dart';/// A bloc that manages the state of a NewAppointment according to the event that is dispatched to it.
class NewAppointmentBloc extends Bloc<NewAppointmentEvent, NewAppointmentState> {NewAppointmentBloc(NewAppointmentState initialState) : super(initialState) { on<NewAppointmentInitialEvent>(_onInitialize); on<ChangeDropDownEvent>(_changeDropDown); on<UpdateChipViewEvent>(_updateChipView); on<ChangeDropDown1Event>(_changeDropDown1); on<UpdateChipView1Event>(_updateChipView1); }

_changeDropDown(ChangeDropDownEvent event, Emitter<NewAppointmentState> emit, ) { emit(state.copyWith(selectedDropDownValue: event.value)); } 
_updateChipView(UpdateChipViewEvent event, Emitter<NewAppointmentState> emit, ) { List<AmItemModel> newList = List<AmItemModel>.from(state.newAppointmentModelObj!.amItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(newAppointmentModelObj: state.newAppointmentModelObj?.copyWith(amItemList: newList))); } 
_changeDropDown1(ChangeDropDown1Event event, Emitter<NewAppointmentState> emit, ) { emit(state.copyWith(selectedDropDownValue1: event.value)); } 
_updateChipView1(UpdateChipView1Event event, Emitter<NewAppointmentState> emit, ) { List<GendersectionItemModel> newList = List<GendersectionItemModel>.from(state.newAppointmentModelObj!.gendersectionItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(newAppointmentModelObj: state.newAppointmentModelObj?.copyWith(gendersectionItemList: newList))); } 
List<SelectionPopupModel> fillDropdownItemList() { return [SelectionPopupModel(id: 1, title: "Item One", isSelected: true), SelectionPopupModel(id: 2, title: "Item Two"), SelectionPopupModel(id: 3, title: "Item Three")]; } 
List<AmItemModel> fillAmItemList() { return List.generate(12, (index) => AmItemModel()); } 
List<SelectionPopupModel> fillDropdownItemList1() { return [SelectionPopupModel(id: 1, title: "Item One", isSelected: true), SelectionPopupModel(id: 2, title: "Item Two"), SelectionPopupModel(id: 3, title: "Item Three")]; } 
List<GendersectionItemModel> fillGendersectionItemList() { return List.generate(2, (index) => GendersectionItemModel()); } 
_onInitialize(NewAppointmentInitialEvent event, Emitter<NewAppointmentState> emit, ) async  { emit(state.copyWith(fullNameController: TextEditingController(), writeProblemController: TextEditingController())); emit(state.copyWith(newAppointmentModelObj: state.newAppointmentModelObj?.copyWith(dropdownItemList: fillDropdownItemList(), amItemList: fillAmItemList(), dropdownItemList1: fillDropdownItemList1(), gendersectionItemList: fillGendersectionItemList()))); } 
 }
