import '../new_appointment_screen/widgets/am_item_widget.dart';import '../new_appointment_screen/widgets/gendersection_item_widget.dart';import 'bloc/new_appointment_bloc.dart';import 'models/am_item_model.dart';import 'models/gendersection_item_model.dart';import 'models/new_appointment_model.dart';import 'package:aayan_mateen_s_application1/core/app_export.dart';import 'package:aayan_mateen_s_application1/widgets/app_bar/appbar_leading_iconbutton_two.dart';import 'package:aayan_mateen_s_application1/widgets/app_bar/appbar_subtitle_four.dart';import 'package:aayan_mateen_s_application1/widgets/app_bar/custom_app_bar.dart';import 'package:aayan_mateen_s_application1/widgets/custom_drop_down.dart';import 'package:aayan_mateen_s_application1/widgets/custom_elevated_button.dart';import 'package:aayan_mateen_s_application1/widgets/custom_text_form_field.dart';import 'package:easy_date_timeline/easy_date_timeline.dart';import 'package:flutter/material.dart';class NewAppointmentScreen extends StatelessWidget {const NewAppointmentScreen({Key? key}) : super(key: key);

static Widget builder(BuildContext context) { return BlocProvider<NewAppointmentBloc>(create: (context) => NewAppointmentBloc(NewAppointmentState(newAppointmentModelObj: NewAppointmentModel()))..add(NewAppointmentInitialEvent()), child: NewAppointmentScreen()); } 
@override Widget build(BuildContext context) { return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, appBar: _buildAppBar(context), body: Container(width: 414.h, padding: EdgeInsets.symmetric(vertical: 21.v), child: Column(children: [SizedBox(height: 24.v), Expanded(child: SingleChildScrollView(child: Padding(padding: EdgeInsets.only(bottom: 5.v), child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [Padding(padding: EdgeInsets.only(left: 27.h), child: BlocSelector<NewAppointmentBloc, NewAppointmentState, NewAppointmentModel?>(selector: (state) => state.newAppointmentModelObj, builder: (context, newAppointmentModelObj) {return CustomDropDown(width: 119.h, hintText: "lbl_july_2020".tr, hintStyle: CustomTextStyles.titleMediumPoppinsBluegray90003SemiBold, items: newAppointmentModelObj?.dropdownItemList ?? [], onChanged: (value) {context.read<NewAppointmentBloc>().add(ChangeDropDownEvent(value: value));});})), SizedBox(height: 13.v), _buildCalendarSection(context), SizedBox(height: 32.v), Padding(padding: EdgeInsets.only(left: 27.h), child: Text("lbl_available_time".tr, style: CustomTextStyles.titleMediumPoppinsBluegray90003SemiBold)), SizedBox(height: 16.v), _buildAvailableTimeSection(context), SizedBox(height: 31.v), Padding(padding: EdgeInsets.only(left: 27.h), child: Text("lbl_patient_details".tr, style: CustomTextStyles.titleMediumPoppinsBluegray90003)), SizedBox(height: 13.v), Padding(padding: EdgeInsets.only(left: 27.h), child: Text("lbl_full_name".tr, style: theme.textTheme.titleSmall)), SizedBox(height: 4.v), Padding(padding: EdgeInsets.symmetric(horizontal: 27.h), child: BlocSelector<NewAppointmentBloc, NewAppointmentState, TextEditingController?>(selector: (state) => state.fullNameController, builder: (context, fullNameController) {return CustomTextFormField(controller: fullNameController, hintText: "lbl_tolu_arowoselu".tr, hintStyle: CustomTextStyles.titleMediumPoppinsBluegray90003SemiBold_1, alignment: Alignment.center, contentPadding: EdgeInsets.symmetric(horizontal: 21.h, vertical: 13.v), borderDecoration: TextFormFieldStyleHelper.fillBlueGray, fillColor: appTheme.blueGray500.withOpacity(0.05));})), SizedBox(height: 21.v), Padding(padding: EdgeInsets.only(left: 27.h), child: Text("lbl_age".tr, style: theme.textTheme.titleSmall)), SizedBox(height: 2.v), Padding(padding: EdgeInsets.symmetric(horizontal: 27.h), child: BlocSelector<NewAppointmentBloc, NewAppointmentState, NewAppointmentModel?>(selector: (state) => state.newAppointmentModelObj, builder: (context, newAppointmentModelObj) {return CustomDropDown(hintText: "lbl_26_30".tr, alignment: Alignment.center, items: newAppointmentModelObj?.dropdownItemList1 ?? [], borderDecoration: DropDownStyleHelper.fillBlueGray, fillColor: appTheme.blueGray500.withOpacity(0.05), onChanged: (value) {context.read<NewAppointmentBloc>().add(ChangeDropDown1Event(value: value));});})), SizedBox(height: 20.v), Padding(padding: EdgeInsets.only(left: 27.h), child: Text("lbl_gender".tr, style: theme.textTheme.titleSmall)), SizedBox(height: 4.v), _buildGenderSection(context), SizedBox(height: 20.v), Padding(padding: EdgeInsets.only(left: 27.h), child: Text("msg_write_your_problem".tr, style: theme.textTheme.titleSmall)), SizedBox(height: 3.v), Padding(padding: EdgeInsets.symmetric(horizontal: 27.h), child: BlocSelector<NewAppointmentBloc, NewAppointmentState, TextEditingController?>(selector: (state) => state.writeProblemController, builder: (context, writeProblemController) {return CustomTextFormField(controller: writeProblemController, hintText: "msg_write_your_problem2".tr, hintStyle: CustomTextStyles.titleMediumPoppinsBluegray500, textInputAction: TextInputAction.done, alignment: Alignment.center, maxLines: 5, borderDecoration: TextFormFieldStyleHelper.fillBlueGray, fillColor: appTheme.blueGray500.withOpacity(0.05));}))]))))])), bottomNavigationBar: _buildSetAppointmentButton(context))); } 
/// Section Widget
PreferredSizeWidget _buildAppBar(BuildContext context) { return CustomAppBar(leadingWidth: 67.h, leading: AppbarLeadingIconbuttonTwo(imagePath: ImageConstant.imgArrowLeftBlueGray90003, margin: EdgeInsets.only(left: 27.h, top: 8.v, bottom: 8.v), onTap: () {onTapArrowLeft(context);}), centerTitle: true, title: AppbarSubtitleFour(text: "lbl_new_appointment".tr)); } 
/// Section Widget
Widget _buildCalendarSection(BuildContext context) { return Align(alignment: Alignment.centerRight, child: SingleChildScrollView(scrollDirection: Axis.horizontal, padding: EdgeInsets.only(left: 27.h), child: IntrinsicWidth(child: BlocBuilder<NewAppointmentBloc, NewAppointmentState>(builder: (context, state) {return SizedBox(height: 90.v, width: 387.h, child: EasyDateTimeLine(initialDate: state.selectedDatesFromCalendar1 ?? DateTime.now(), locale: 'en_US', headerProps: EasyHeaderProps(selectedDateFormat: SelectedDateFormat.fullDateDMY, monthPickerType: MonthPickerType.switcher, showHeader: false), dayProps: EasyDayProps(width: 80.h, height: 90.v), onDateChange: (selectedDate) {state.selectedDatesFromCalendar1 = selectedDate;}, itemBuilder: (context, dayNumber, dayName, monthName, fullDate, isSelected) {return isSelected ? Container(width: 80.h, padding: EdgeInsets.symmetric(horizontal: 27.h, vertical: 11.v), decoration: BoxDecoration(color: theme.colorScheme.primary, borderRadius: BorderRadius.circular(13.h), boxShadow: [BoxShadow(color: appTheme.black90001.withOpacity(0.1), spreadRadius: 2.h, blurRadius: 2.h, offset: Offset(0, 10))]), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.center, mainAxisAlignment: MainAxisAlignment.center, children: [Padding(padding: EdgeInsets.only(top: 7.v), child: Text(dayNumber.toString(), style: CustomTextStyles.headlineSmallPoppinsWhiteA700.copyWith(color: appTheme.whiteA700))), Padding(padding: EdgeInsets.only(top: 6.v), child: Text(dayName.toString(), style: CustomTextStyles.labelLargePoppinsWhiteA700SemiBold.copyWith(color: appTheme.whiteA700)))])) : Container(width: 80.h, padding: EdgeInsets.symmetric(horizontal: 27.h, vertical: 10.v), decoration: BoxDecoration(color: appTheme.whiteA700, borderRadius: BorderRadius.circular(13.h), border: Border.all(color: appTheme.blueGray500.withOpacity(0.1), width: 1.h)), child: Column(mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.center, mainAxisAlignment: MainAxisAlignment.center, children: [Padding(padding: EdgeInsets.only(top: 8.v), child: Text(dayNumber.toString(), textAlign: TextAlign.center, style: CustomTextStyles.headlineSmallPoppinsBluegray90003.copyWith(color: appTheme.blueGray90003))), Padding(padding: EdgeInsets.only(top: 6.v), child: Text(dayName.toString(), textAlign: TextAlign.center, style: CustomTextStyles.labelLargePoppinsBluegray500.copyWith(color: appTheme.blueGray500)))]));}));})))); } 
/// Section Widget
Widget _buildAvailableTimeSection(BuildContext context) { return Align(alignment: Alignment.centerRight, child: SingleChildScrollView(scrollDirection: Axis.horizontal, padding: EdgeInsets.only(left: 27.h), child: IntrinsicWidth(child: BlocSelector<NewAppointmentBloc, NewAppointmentState, NewAppointmentModel?>(selector: (state) => state.newAppointmentModelObj, builder: (context, newAppointmentModelObj) {return Wrap(runSpacing: 10.v, spacing: 10.h, children: List<Widget>.generate(newAppointmentModelObj?.amItemList.length ?? 0, (index) {AmItemModel model = newAppointmentModelObj?.amItemList[index] ?? AmItemModel(); return AmItemWidget(model, onSelectedChipView: (value) {context.read<NewAppointmentBloc>().add(UpdateChipViewEvent(index: index, isSelected: value));});}));})))); } 
/// Section Widget
Widget _buildGenderSection(BuildContext context) { return Padding(padding: EdgeInsets.only(left: 27.h), child: BlocSelector<NewAppointmentBloc, NewAppointmentState, NewAppointmentModel?>(selector: (state) => state.newAppointmentModelObj, builder: (context, newAppointmentModelObj) {return Wrap(runSpacing: 10.v, spacing: 10.h, children: List<Widget>.generate(newAppointmentModelObj?.gendersectionItemList.length ?? 0, (index) {GendersectionItemModel model = newAppointmentModelObj?.gendersectionItemList[index] ?? GendersectionItemModel(); return GendersectionItemWidget(model, onSelectedChipView: (value) {context.read<NewAppointmentBloc>().add(UpdateChipView1Event(index: index, isSelected: value));});}));})); } 
/// Section Widget
Widget _buildSetAppointmentButton(BuildContext context) { return CustomElevatedButton(height: 60.v, text: "lbl_set_appointment".tr, margin: EdgeInsets.only(left: 27.h, right: 27.h, bottom: 21.v)); } 

/// Navigates to the previous screen.
onTapArrowLeft(BuildContext context) { NavigatorService.goBack(); } 
 }
